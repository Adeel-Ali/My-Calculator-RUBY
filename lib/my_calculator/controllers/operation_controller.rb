# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MyCalculator
  class OperationController < BaseController
    @@instance = OperationController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Calculates the expression using the specified operation.
    # @param [OperationEnum] operation Required parameter: The operator to apply on the variables
    # @param [Float] x Required parameter: The LHS value
    # @param [Float] y Required parameter: The RHS value
    # @return Mixed response from the API call
    def get_calculate(operation, 
                      x, 
                      y)

      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/{operation}'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'operation' => operation
      }

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'x' => x,
        'y' => y
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # create the HttpRequest object for the call
      _request = @http_client.get _query_url, headers: _headers

      # execute the request
      _context = execute_request(_request)

      # global error handling using HTTP status codes.
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end
  end
end
